(function(global,factory){typeof exports==='object'&&typeof module!=='undefined'?module.exports=factory():typeof define==='function'&&define.amd?define(factory):(global=global||self,global.ESPRGB=factory())}(this,function(){'use strict';class SolidColor{#this;#powerButton;#Color;#Hex;#Brightness;constructor(_this){this.#this=_this;this.#powerButton=!1;this.#Color=[255,255,255];this.#Hex='#ffffff';this.#Brightness=1.0}
set _Color(value){this.#Color=value;this.#Hex=this.#this.rgbToHex(this.#Color[0],this.#Color[1],this.#Color[2]);this.#this.emit(this,'Color:change',{Color:this.#Color,Hex:this.#Hex})}
get Color(){return this.#Color}
get Hex(){return this.#Hex}
set _Brightness(value){this.#Brightness=value;this.#this.emit(this,'Brightness:change',{Brightness:this.#Brightness})}
get Brightness(){return this.#Brightness}
set _powerButton(value){this.#powerButton=value;this.#this.emit(this,'powerButton:change',{powerButton:this.#powerButton})}
get powerButton(){return this.#powerButton}
setRGBColor(red,green,blue){this.#Color=[red,green,blue];this.#Hex=this.#this.rgbToHex(red,green,blue);const params=this.#this._animParam({"SolidColor":{"Color":[this.#Color[0]*4,this.#Color[1]*4,this.#Color[2]*4]}});this.#this.setAnimation("Solid Color",params)}
setHexColor(hex){if(!this.#this.isHexColor(hex))return;const color=this.#this.hexToColor(hex);this.setRGBColor(color.r,color.g,color.b);this.#this.emit(this,'Color:change',{Color:this.#Color,Hex:this.#Hex})}
setBrightness(brightness){if(brightness>1.0||brightness<0.0){console.log('Input range is between 0.0 to 1.0');return}
this.#Brightness=brightness;const params=this.#this._animParam({"SolidColor":{'Brightness':this.#Brightness}});this.#this.setAnimation("Solid Color",params)}
powerButtonToggle(){if(this.#this.CheckIfConnected())return;this.#powerButton=!this.#powerButton;if(this.powerButton)this.#this.setAnimation("Power On");else this.#this.setAnimation("Power Off")}
on(eventList,callback){this.#this.setEvent(this,eventList,callback)}}
class ColorCycle{#this;#Speed;constructor(_this){this.#this=_this;this.#Speed=0}
set _Speed(value){this.#Speed=value;this.#this.emit(this,'Speed:change',{Speed:this.#Speed})}
get Speed(){return this.#Speed}
setSpeed(value){if(this.#this.CheckIfConnected())return;this.#Speed=value;this.#this.WebSocket.send(JSON.stringify(this.#this._animParam({'ColorCycle':{'ColorCycleSpeed':this.#Speed}})))}
on(eventList,callback){this.#this.setEvent(this,eventList,callback)}}
class Breathing{#this;#ColorList;#Hex;#Speed;#useColorList;#StaticColor;constructor(_this){this.#this=_this;this.#ColorList=[];this.#useColorList=!1;this.#StaticColor=[255,255,255];this.#Hex='#ffffff';this.#Speed=0}
set _Speed(value){this.#Speed=value;this.#this.emit(this,'Speed:change',{Speed:this.#Speed})}
get Speed(){return this.#Speed}
set _useColorList(value){this.#useColorList=value;this.#this.emit(this,'useColorList:change',{useColorList:this.#useColorList})}
get useColorList(){return this.#useColorList}
get Hex(){return this.#Hex}
get StaticColor(){return this.#StaticColor}
set _StaticColor(value){this.#StaticColor=value;this.#Hex=this.#this.rgbToHex(this.#StaticColor[0],this.#StaticColor[1],this.#StaticColor[2]);this.#this.emit(this,'StaticColor:change',{StaticColor:this.#StaticColor,Hex:this.#Hex})}
get colorList(){return this.#ColorList}
set _colorList(value){this.#ColorList=value;this.#this.emit(this,'colorList:change',{colorList:this.#ColorList})}
get colorList(){return this.#ColorList}
setSpeed(value){if(this.#this.CheckIfConnected())return;this.#Speed=value;this.#this.WebSocket.send(JSON.stringify(this.#this._animParam({'Breathing':{'breathingSpeed':this.#Speed}})))}
setUseColorList(checked){if(this.#this.CheckIfConnected())return;this.#useColorList=checked;this.#this.WebSocket.send(JSON.stringify(this.#this._animParam({'Breathing':{'useColorList':this.#useColorList}})))}
setHexColor(hex){if(!this.#this.isHexColor(hex))return;const color=this.#this.hexToColor(hex);this.setRGBColor(color.r,color.g,color.b);this.#this.emit(this,'StaticColor:change',{StaticColor:this.#StaticColor,Hex:this.#Hex})}
setRGBColor(red,green,blue){if(this.#this.CheckIfConnected())return;this.#StaticColor=[red,green,blue];this.#Hex=this.#this.rgbToHex(red,green,blue);this.#this.WebSocket.send(JSON.stringify(this.#this._animParam({"Breathing":{"staticColorBreathing":[this.#StaticColor[0]*4,this.#StaticColor[1]*4,this.#StaticColor[2]*4]}})))}
clearList(){if(this.#this.CheckIfConnected())return;this.#this.WebSocket.send(JSON.stringify(this.#this._animParam({'Breathing':{'clearColorList':!0}})))}
removeLastfromList(){if(this.#this.CheckIfConnected())return;this.#this.WebSocket.send(JSON.stringify(this.#this._animParam({'Breathing':{'removeLastfromList':!0}})))}
addColortoList(red,green,blue){if(this.#this.CheckIfConnected())return;if(this.#ColorList.length!=25)this.#this.WebSocket.send(JSON.stringify(this.#this._animParam({'Breathing':{'addColortoList':[red*4,green*4,blue*4]}})));else alert('25 colors limit')}
on(eventList,callback){this.#this.setEvent(this,eventList,callback)}}
class MorseCode{#this;#alphabet;#morse;#useBuzzer;#Speed;#Color;#Hex;#PlainText;#EncodedText;constructor(_this){this.#this=_this;this.#useBuzzer=!1;this.#Speed=0;this.#Color=[255,255,255];this.#Hex='#ffffff';this.#PlainText="";this.#EncodedText="";this.#alphabet=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","1","2","3","4","5","6","7","8","9","0","!","@","&","(",")","-","_","=","+",".",",","/","?",";",":","\"","\'"];this.#morse=[".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--..",".----","..---","...--","....-","-....","--...","---..","----.","-----","-.-.--",".--.-.",".....",".-...","-.--.","-.--.-","-....-","..--.-","-...-",".-.-.",".-.-.-","--..--","-..-.","..--..","-.-.-.","---...",".----.",".-..-."]}
get Speed(){return this.#Speed}
set _Speed(value){this.#Speed=value;this.#this.emit(this,'Speed:change',{Speed:this.#Speed})}
get useBuzzer(){return this.#useBuzzer}
set _useBuzzer(value){this.#useBuzzer=value;this.#this.emit(this,'useBuzzer:change',{useBuzzer:this.#useBuzzer})}
get EncodedText(){return this.#EncodedText}
get PlainText(){return this.#PlainText}
set _EncodedText(value){this.#EncodedText=value;this.#PlainText=this.decodeMessage(this.#EncodedText)
this.#this.emit(this,'encodedText:change',{PlainText:this.#PlainText,EncodedText:this.#EncodedText})}
set _Color(value){this.#Color=value;this.#Hex=this.#this.rgbToHex(this.#Color[0],this.#Color[1],this.#Color[2]);this.#this.emit(this,'Color:change',{Color:this.#Color,Hex:this.#Hex})}
get Color(){return this.#Color}
get Hex(){return this.#Hex}
setSpeed(value){if(this.#this.CheckIfConnected())return;this.#Speed=value;this.#this.WebSocket.send(JSON.stringify(this.#this._animParam({'MorseCode':{'unitTimeMorseCode':this.#Speed}})))}
setUseBuzzer(checked){if(this.#this.CheckIfConnected())return;this.#useBuzzer=checked;this.#this.WebSocket.send(JSON.stringify(this.#this._animParam({'MorseCode':{'useBuzzer':this.#useBuzzer}})))}
setText(text){if(this.#this.CheckIfConnected())return;this.#PlainText=text;this.#EncodedText=this.encodeMessage(this.#PlainText);this.#this.WebSocket.send(JSON.stringify(this.#this._animParam({'MorseCode':{'encodedMorseCode':this.#EncodedText}})));return this.#EncodedText}
setHexColor(hex){if(!this.#this.isHexColor(hex))return;const color=this.#this.hexToColor(hex);this.setRGBColor(color.r,color.g,color.b);this.#this.emit(this,'Color:change',{Color:this.#Color,Hex:this.#Hex})}
setRGBColor(red,green,blue){if(this.#this.CheckIfConnected())return;this.#Color=[red,green,blue];this.#Hex=this.#this.rgbToHex(red,green,blue);this.#this.WebSocket.send(JSON.stringify(this.#this._animParam({"MorseCode":{"colorMorseCode":[this.#Color[0]*4,this.#Color[1]*4,this.#Color[2]*4]}})))}
encodeMessage(e){var encoded="";var words=e.split(/\s+/).filter(function(i){return i});for(var i=0;i<words.length;i++){var ch=words[i].split('').filter(function(i){return i});for(var j=0;j<ch.length;j++){if(this.#alphabet.indexOf(ch[j])>-1){encoded+=this.#morse[this.#alphabet.indexOf(ch[j])];if(j+1!=ch.length)encoded+="*"}}
if(i+1!=words.length)encoded+="|"}
return encoded}
decodeMessage(e){var decoded="";var encodedWords=e.split('|').filter(function(i){return i});for(var i=0;i<encodedWords.length;i++){var ch=encodedWords[i].split('*').filter(function(i){return i});for(var j=0;j<ch.length;j++)if(this.#morse.indexOf(ch[j])>-1)decoded+=this.#alphabet[this.#morse.indexOf(ch[j])];if(i+1!=encodedWords.length)decoded+=" "}
return decoded}
on(eventList,callback){this.#this.setEvent(this,eventList,callback)}}
class TimeSchedule{#this;#Enabled;#Schedules;constructor(_this){this.#this=_this;this.#Enabled=!1;this.#Schedules=[]}
get Enabled(){return this.#Enabled}
set _Enabled(value){this.#Enabled=value;this.#this.emit(this,'Enabled:change',{Enabled:this.#Enabled})}
get Schedules(){return this.#Schedules}
set _Schedules(value){this.#Schedules=value;this.#this.emit(this,'Schedules:change',{Schedules:this.#Schedules})}
enable(value){if(this.#this.CheckIfConnected())return;this.#Enabled=value;this.#this.WebSocket.send(JSON.stringify({'Animations':{'Schedules':{'enableScheduler':this.#Enabled}}}))}
Remove(timestamp){if(this.#this.CheckIfConnected())return;this.#this.WebSocket.send(JSON.stringify({'Animations':{'Schedules':{'removeTimeSchedule':{'Timestamp':timestamp}}}}))}
EnableSchedule(timestamp,value){if(this.#this.CheckIfConnected())return;this.#this.WebSocket.send(JSON.stringify({'Animations':{'Schedules':{'editTimeSchedule':{'oldTimestamp':timestamp,"newData":{"enable":value}}}}}))}
addSchedule(label,days,timestamp,animation,parameters){if(this.#this.CheckIfConnected())return;this.#this.WebSocket.send(JSON.stringify({"Animations":{"Schedules":{"newTimeSchedule":this.scheduleJson(label,days,timestamp,animation,parameters)}}}))}
editSchedule(oldtimestamp,_label,_days,_timestamp,_animation,_parameters){if(this.#this.CheckIfConnected())return;this.#this.WebSocket.send(JSON.stringify({"Animations":{"Schedules":{"editTimeSchedule":{"oldTimestamp":oldtimestamp,"newData":this.scheduleJson(_label,_days,_timestamp,_animation,_parameters)}}}}))}
scheduleJson(label,days,timestamp,animation,parameters){return{"Label":label,"Days":days,"Timestamp":timestamp,"playingAnimation":animation,"parameters":parameters,"enable":!0}}
on(eventList,callback){this.#this.setEvent(this,eventList,callback)}}
class ESPRGB{#RSSIInterval;#events;#deferredEvents;#activeEvents;#powerConnected;#playingAnimation;#RSSI;#Version;constructor(ipaddress,port=81){this.ipaddress=ipaddress;this.port=port;this.#powerConnected=!1;this.#playingAnimation="";this.#RSSI=0;this.#Version='';this.SolidColor=new SolidColor(this);this.ColorCycle=new ColorCycle(this);this.Breathing=new Breathing(this);this.MorseCode=new MorseCode(this);this.TimeSchedule=new TimeSchedule(this);this.#RSSIInterval;this.#events={};this.#deferredEvents={};this.#activeEvents={}}
get powerConnected(){return this.#powerConnected}
set powerConnected(value){this.#powerConnected=value;this.emit(this,'powerConnected:change',{powerConnected:this.#powerConnected})}
get playingAnimation(){return this.#playingAnimation}
set playingAnimation(value){this.#playingAnimation=value;this.emit(this,'playingAnimation:change',{playingAnimation:this.#playingAnimation})}
get RSSI(){return this.#RSSI}
set RSSI(value){this.#RSSI=value;this.emit(this,'RSSI:change',{RSSI:this.#RSSI})}
get Version(){return this.#Version}
set Version(value){this.#Version=value;this.emit(this,'Version:change',{Version:this.#Version})}
CheckIfConnected(dontprintWarning=!1){if(this.WebSocket==null||this.WebSocket==='undefined'||this.WebSocket.readyState===WebSocket.CLOSED){if(!dontprintWarning)console.log('WebSocket connection is not available.');return!0}
return!1}
ConnectToggle(){if(!this.CheckIfConnected(!0)){this.Disconnect();return!1}
this.Connect();return!0}
Connect(){this.WebSocket=new WebSocket(`ws://${this.ipaddress}:${this.port}/`);this.WebSocket.onopen=async(e)=>{console.log("Connected");this.playingAnimation="Connected";this.emit(this,'connected:change',{connected:!0});this.Version=await this.getVersion();this.#RSSIInterval=setInterval(async()=>this.RSSI=await this.getSignalStrength(),10000)}
this.WebSocket.onmessage=(event)=>{var data=JSON.parse(event.data);if("Animations" in data){var anim=data.Animations;if("parameters" in anim){var params=anim.parameters;if("SolidColor" in params){if("Color" in params.SolidColor)this.SolidColor._Color=[params.SolidColor.Color[0]/4,params.SolidColor.Color[1]/4,params.SolidColor.Color[2]/4];if("Brightness" in params.SolidColor)this.SolidColor._Brightness=params.SolidColor.Brightness}
if("ColorCycle" in params){if("ColorCycleSpeed" in params.ColorCycle)this.ColorCycle._Speed=params.ColorCycle.ColorCycleSpeed}
if("Breathing" in params){if("breathingSpeed" in params.Breathing)this.Breathing._Speed=params.Breathing.breathingSpeed;if("colorListBreathing" in params.Breathing){const colors=[];params.Breathing.colorListBreathing.forEach(item=>colors.push([item[0]/4,item[1]/4,item[2]/4]))
this.Breathing._colorList=colors}
if("staticColorBreathing" in params.Breathing)
this.Breathing._StaticColor=[params.Breathing.staticColorBreathing[0]/4,params.Breathing.staticColorBreathing[1]/4,params.Breathing.staticColorBreathing[2]/4];if("useColorList" in params.Breathing)this.Breathing._useColorList=params.Breathing.useColorList}
if("MorseCode" in params){if("encodedMorseCode" in params.MorseCode)this.MorseCode._EncodedText=params.MorseCode.encodedMorseCode;if("unitTimeMorseCode" in params.MorseCode)this.MorseCode._Speed=params.MorseCode.unitTimeMorseCode;if("useBuzzer" in params.MorseCode)this.MorseCode._useBuzzer=params.MorseCode.useBuzzer;if("colorMorseCode" in params.MorseCode)
this.MorseCode._Color=[params.MorseCode.colorMorseCode[0]/4,params.MorseCode.colorMorseCode[1]/4,params.MorseCode.colorMorseCode[2]/4]}}
if("Schedules" in anim){if("enableScheduler" in anim.Schedules)this.TimeSchedule._Enabled=anim.Schedules.enableScheduler;if("timeSchedule" in anim.Schedules)this.TimeSchedule._Schedules=anim.Schedules.timeSchedule}
if("PowerState" in anim)this.SolidColor._powerButton=anim.PowerState;if("playingAnimation" in anim)this.playingAnimation=anim.playingAnimation;if("powerConnected" in anim)this.powerConnected=anim.powerConnected}}
this.WebSocket.onclose=(e)=>{console.log("Disconnected");this.playingAnimation="Disconnected";this.emit(this,'connected:change',{connected:!1})}
this.WebSocket.onerror=(e)=>{console.log("Disconnected");this.playingAnimation="Disconnected";this.emit(this,'connected:change',{connected:!1})}}
Disconnect(){if(this.CheckIfConnected())return;this.WebSocket.close();clearInterval(this.#RSSIInterval)}
_animParam(param){return{"Animations":{"parameters":param}}}
merge(obj1,obj2){for(var p in obj2){try{if(obj2[p].constructor==Object)obj1[p]=this.merge(obj1[p],obj2[p]);else obj1[p]=obj2[p]}catch(e){obj1[p]=obj2[p]}}
return obj1}
hexToColor(hex){if(hex[0]=='#')hex=hex.substring(1);var bigint=parseInt(hex,16);return{r:(bigint>>16)&255,g:(bigint>>8)&255,b:bigint&255}}
playAnimation(animation,status=!0){if(status==!1){this.setAnimation('Solid Color');return}
this.setAnimation(animation)}
setAnimation(animation,parameters=null){if(this.CheckIfConnected())return;var anim={"Animations":{"playingAnimation":animation}};if(parameters!=null)anim=this.merge(anim,parameters);this.WebSocket.send(JSON.stringify(anim))}
powerConnectedToggle(){if(this.CheckIfConnected())return;this.powerConnected=!this.powerConnected;this.WebSocket.send(JSON.stringify({"Animations":{'powerConnected':this.powerConnected}}))}
restart(){this.Disconnect();const xhr=new XMLHttpRequest();xhr.open('GET',`http://${this.ipaddress}/restartESP`,!0);xhr.send()}
format(){this.Disconnect();const xhr=new XMLHttpRequest();xhr.open('GET',`http://${this.ipaddress}/formatDevice`,!0);xhr.send()}
removeUserData(){this.Disconnect();const xhr=new XMLHttpRequest();xhr.open('GET',`http://${this.ipaddress}/removeUserData`,!0);xhr.send()}
getSignalStrength(){return new Promise(async(resolve,reject)=>{var xhr=new XMLHttpRequest();xhr.open("GET",`http://${this.ipaddress}/getSignalStrenght`,!0);xhr.onload=function(){if(this.status>=200&&this.status<300){const data=JSON.parse(xhr.response);if("RSSI" in data)resolve(data.RSSI);resolve('0.0.0.0')}else reject('-70')};xhr.onerror=function(){reject('-70')};xhr.send()})}
getVersion(){return new Promise(async(resolve,reject)=>{var xhr=new XMLHttpRequest();xhr.open("GET",`http://${this.ipaddress}/getVersion`,!0);xhr.onload=function(){if(this.status>=200&&this.status<300){const version=JSON.parse(xhr.response);if("ESPRGB_VERSION" in version)resolve(version.ESPRGB_VERSION);resolve('0.0.0.0')}else reject('0.0.0.0')};xhr.onerror=function(){reject('0.0.0.0')};xhr.send()})}
emit(sender,eventType,...args){eventType=`${sender.__proto__.constructor.name}_${eventType}`;const activeEvents=this.#activeEvents;const isEventActive=activeEvents.hasOwnProperty(eventType)?activeEvents[eventType]:!1;if(!isEventActive){activeEvents[eventType]=!0;const callbackList=this.#events[eventType]||[];callbackList.forEach(fn=>fn.apply(this,args));activeEvents[eventType]=!1}}
setEvent(sender,eventList,callback){eventList=`${sender.__proto__.constructor.name}_${eventList}`;const events=this.#events;(!Array.isArray(eventList)?[eventList]:eventList).forEach(eventType=>{(events[eventType]||(events[eventType]=[])).push(callback);if(this.#deferredEvents[eventType]){this.#deferredEvents[eventType].forEach(args=>{callback.apply(null,args)});this.#deferredEvents[eventType]=[]}})}
isHexColor(hex){return typeof hex==='string'&&hex.charAt(0)==='#'&&hex.length===7&&!isNaN(Number('0x'+hex.substring(1)))}
rgbToHex(r,g,b){return"#"+((1<<24)+(r<<16)+(g<<8)+b).toString(16).slice(1)}
on(eventList,callback){this.setEvent(this,eventList,callback)}}
return ESPRGB}))